@{
	ViewData["Title"] = "Index";
}
@model Certificate_Wiki.Models.Certificate.CertificateIndex
@using Newtonsoft.Json
<script src="//mozilla.github.io/pdf.js/build/pdf.js"></script>
<script src="https://kit.fontawesome.com/f3cae94d9e.js" crossorigin="anonymous"></script>

<link rel="stylesheet" href="~/css/pages/CertificateIndex.css" media="all" />

<div class="background"></div>
<div class="search">
	<form method="get" asp-action="index" asp-controller="search">
		<button type="submit">
			<i class="fas fa-search"></i>
		</button>
	</form>
	@if (Model.IsOwner) {

		<form method="get" asp-action="Upload" asp-route-id="@Model.Certificate.CertificateId">
			<button type="submit">
				<i class="far fa-edit"></i>
			</button>
		</form>
	}
</div>
<div class="content">

	@if (!Model.IsPrivate) {
		<div class="certificate">
			<div class="certificate-image">
				<canvas id="pdf"></canvas>
				<img id="image" src="@Model.CertificateUrl" alt="" />
			</div>
			<div class="certificate-info">
				<div class="info-first">
					<h1>@Model.Certificate.CertificateName</h1>
					<p>@Model.Certificate.Description</p>
				</div>

				<div class="info-second">
					<p>
						Owner
						<span>
							<a asp-controller="Profile" asp-action="Index" asp-route-userId="@Model.Certificate.UserFk">
								@Model.CertificateOwner.FirstName @Model.CertificateOwner.LastName
							</a>
						</span>
					</p>
					<p>
						Subject
						<span>
							@Model.Certificate.Subject
						</span>
					</p>
					<p>
						Admissioner
						<span>
							@Model.Certificate.Admissioner
						</span>
					</p>
				</div>
			</div>
		</div>
	} else {
		<div class="certificate">
			<h1>The owner of this certificate has a private profile</h1>
		</div>
	}
</div>

<script>
	document.getElementById("pdf").style.display = "none";
	var pdfData = atob('@Html.Raw(JsonConvert.DeserializeObject(ViewBag.story))');
	// Loaded via <script> tag, create shortcut to access PDF.js exports.
	var pdfjsLib = window['pdfjs-dist/build/pdf'];
	// The workerSrc property shall be specified.
	pdfjsLib.GlobalWorkerOptions.workerSrc = '//mozilla.github.io/pdf.js/build/pdf.worker.js';
	// Using DocumentInitParameters object to load binary data.
	var loadingTask = pdfjsLib.getDocument({ data: pdfData });
	loadingTask.promise.then(function (pdf) {
		console.log('PDF loaded');
		// Fetch the first page
		var pageNumber = 1;
		pdf.getPage(pageNumber).then(function (page) {
			console.log('Page loaded');
			var scale = 1.5;
			var viewport = page.getViewport({ scale: scale });
			// Prepare canvas using PDF page dimensions
			var canvas = document.getElementById('pdf');
			var context = canvas.getContext('2d');
			canvas.width = viewport.width;
			canvas.height = viewport.height;
			// Render PDF page into canvas context
			var renderContext = {
				canvasContext: context,
				viewport: viewport
			};
			var renderTask = page.render(renderContext);
			renderTask.promise.then(function () {
				document.getElementById("image").style.display = "none";
				document.getElementById("pdf").style.display = "block";
			});
		});
	}, function (reason) {
		// PDF loading error
			console.error(reason);
	});
</script>